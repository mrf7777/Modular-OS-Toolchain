# given two files, this program will join them into another, specified file.
# the order does matter, the contents of f1 are appened to out before f2.

# expected input: f1, f2, out
# f1: filename of a file
# f2: filename of a second file.
# out: filename of where the two files' contents are joined
main:
	
	# f1 f2 out
	
	#### creates the file out if it does not exists. If it exists, clear it.
	peek
	"0"
	createFile
	
	# f1 f2 out
	
	#### time to recursivly add contents
	
	#### start with adding f1 to out
	
	"3"
	peekBack
	
	# f1 f2 out f1
	
	"2"
	peekBack
	
	# f1 f2 out f1 out
	
	"1"
	
	# f1 f2 out f1 out 1
	
	"append-file"
	call
	
	# f1 f2 out
	
	#### finish with adding f2 to out
	
	"2"
	peekBack
	
	# f1 f2 out f2
	
	"2"
	peekBack
	
	# f1 f2 out f2 out
	
	"1"
	
	# f1 f2 out f2 out 1
	
	"append-file"
	call
	
	# f1 f2 out
	
	"3"
	popTimes
	
	# <empty stack>
	
	return
	
	
# input: f out start
# f: the source file
# out: the file where to append the contents
# start: where to start appending. appends until the end of file f
append-file:

	# f out start
	
	#### catch the case where start == fileSize(f)+1
	
	"3"
	peekBack

	# f out start f
	
	getFileSize
	
	# f out start fileSize(f)
	
	"1"
	add
	
	# f out start fileSize(f)+1
	
	"2"
	peekBack
	
	# f out start fileSize(f)+1 start
	
	equal
	
	# f out start (fileSize(f)+1==start)
	
	"append-file-end-case"
	
	# f out start (fileSize(f)+1==start) append-file-end-case
	
	"2"
	peekBack
	
	# f out start (fileSize(f)+1==start) append-file-end-case (fileSize(f)+1==start)
	
	#### catch the edge case where there is nothing to append.
	gotoIf
	
	# f out start (fileSize(f)+1==start)
	
	pop
	
	# f out start
	
	#### if here, append the content at start of file f and make recursive call append-file(f, out, start+1)

	"3"
	peekBack
	
	# f out start f
	
	"2"
	peekBack
	
	# f out start f start
	
	getLineFromFile
	
	# f out start f[start]
	
	"3"
	peekBack
	
	# f out start f[start] out
	
	"2"
	peekBack
	
	# f out start f[start] out f[start]
	
	#### finally, append the line to the file out
	appendFile
	
	# f out start f[start]
	
	pop
	
	# f out start
	
	#### prepare for a recursive call
	
	"1"
	add
	
	# f out start+1
	
	"append-file"
	call

	return
	
append-file-end-case:

	# f out start (fileSize(f)+1==start)
	
	#### if here, there is nothing to append. simply return
	
	"4"
	popTimes
	
	# <empty stack>

	return